package instructions;

/* Automatically generated by parse-opcodes */
typedef enum logic [32-1:0] {
//                             fedcba9876543210fedcba9876543210
  ISA_BEQ                = 32'bxxxxxxxxxxxxxxxxx000xxxxx1100011,
  ISA_BNE                = 32'bxxxxxxxxxxxxxxxxx001xxxxx1100011,
  ISA_BLT                = 32'bxxxxxxxxxxxxxxxxx100xxxxx1100011,
  ISA_BGE                = 32'bxxxxxxxxxxxxxxxxx101xxxxx1100011,
  ISA_BLTU               = 32'bxxxxxxxxxxxxxxxxx110xxxxx1100011,
  ISA_BGEU               = 32'bxxxxxxxxxxxxxxxxx111xxxxx1100011,
  ISA_JALR               = 32'bxxxxxxxxxxxxxxxxx000xxxxx1100111,
  ISA_JAL                = 32'bxxxxxxxxxxxxxxxxxxxxxxxxx1101111,
  ISA_LUI                = 32'bxxxxxxxxxxxxxxxxxxxxxxxxx0110111,
  ISA_AUIPC              = 32'bxxxxxxxxxxxxxxxxxxxxxxxxx0010111,
  ISA_ADDI               = 32'bxxxxxxxxxxxxxxxxx000xxxxx0010011,
  ISA_SLLI               = 32'b000000xxxxxxxxxxx001xxxxx0010011,
  ISA_SLTI               = 32'bxxxxxxxxxxxxxxxxx010xxxxx0010011,
  ISA_SLTIU              = 32'bxxxxxxxxxxxxxxxxx011xxxxx0010011,
  ISA_XORI               = 32'bxxxxxxxxxxxxxxxxx100xxxxx0010011,
  ISA_SRLI               = 32'b000000xxxxxxxxxxx101xxxxx0010011,
  ISA_SRAI               = 32'b010000xxxxxxxxxxx101xxxxx0010011,
  ISA_ORI                = 32'bxxxxxxxxxxxxxxxxx110xxxxx0010011,
  ISA_ANDI               = 32'bxxxxxxxxxxxxxxxxx111xxxxx0010011,
  ISA_ADD                = 32'b0000000xxxxxxxxxx000xxxxx0110011,
  ISA_SUB                = 32'b0100000xxxxxxxxxx000xxxxx0110011,
  ISA_SLL                = 32'b0000000xxxxxxxxxx001xxxxx0110011,
  ISA_SLT                = 32'b0000000xxxxxxxxxx010xxxxx0110011,
  ISA_SLTU               = 32'b0000000xxxxxxxxxx011xxxxx0110011,
  ISA_XOR                = 32'b0000000xxxxxxxxxx100xxxxx0110011,
  ISA_SRL                = 32'b0000000xxxxxxxxxx101xxxxx0110011,
  ISA_SRA                = 32'b0100000xxxxxxxxxx101xxxxx0110011,
  ISA_OR                 = 32'b0000000xxxxxxxxxx110xxxxx0110011,
  ISA_AND                = 32'b0000000xxxxxxxxxx111xxxxx0110011,
  ISA_ADDIW              = 32'bxxxxxxxxxxxxxxxxx000xxxxx0011011,
  ISA_SLLIW              = 32'b0000000xxxxxxxxxx001xxxxx0011011,
  ISA_SRLIW              = 32'b0000000xxxxxxxxxx101xxxxx0011011,
  ISA_SRAIW              = 32'b0100000xxxxxxxxxx101xxxxx0011011,
  ISA_ADDW               = 32'b0000000xxxxxxxxxx000xxxxx0111011,
  ISA_SUBW               = 32'b0100000xxxxxxxxxx000xxxxx0111011,
  ISA_SLLW               = 32'b0000000xxxxxxxxxx001xxxxx0111011,
  ISA_SRLW               = 32'b0000000xxxxxxxxxx101xxxxx0111011,
  ISA_SRAW               = 32'b0100000xxxxxxxxxx101xxxxx0111011,
  ISA_LB                 = 32'bxxxxxxxxxxxxxxxxx000xxxxx0000011,
  ISA_LH                 = 32'bxxxxxxxxxxxxxxxxx001xxxxx0000011,
  ISA_LW                 = 32'bxxxxxxxxxxxxxxxxx010xxxxx0000011,
  ISA_LD                 = 32'bxxxxxxxxxxxxxxxxx011xxxxx0000011,
  ISA_LBU                = 32'bxxxxxxxxxxxxxxxxx100xxxxx0000011,
  ISA_LHU                = 32'bxxxxxxxxxxxxxxxxx101xxxxx0000011,
  ISA_LWU                = 32'bxxxxxxxxxxxxxxxxx110xxxxx0000011,
  ISA_SB                 = 32'bxxxxxxxxxxxxxxxxx000xxxxx0100011,
  ISA_SH                 = 32'bxxxxxxxxxxxxxxxxx001xxxxx0100011,
  ISA_SW                 = 32'bxxxxxxxxxxxxxxxxx010xxxxx0100011,
  ISA_SD                 = 32'bxxxxxxxxxxxxxxxxx011xxxxx0100011,
  ISA_FENCE              = 32'bxxxxxxxxxxxxxxxxx000xxxxx0001111,
  ISA_FENCE_I            = 32'bxxxxxxxxxxxxxxxxx001xxxxx0001111,
  ISA_MUL                = 32'b0000001xxxxxxxxxx000xxxxx0110011,
  ISA_MULH               = 32'b0000001xxxxxxxxxx001xxxxx0110011,
  ISA_MULHSU             = 32'b0000001xxxxxxxxxx010xxxxx0110011,
  ISA_MULHU              = 32'b0000001xxxxxxxxxx011xxxxx0110011,
  ISA_DIV                = 32'b0000001xxxxxxxxxx100xxxxx0110011,
  ISA_DIVU               = 32'b0000001xxxxxxxxxx101xxxxx0110011,
  ISA_REM                = 32'b0000001xxxxxxxxxx110xxxxx0110011,
  ISA_REMU               = 32'b0000001xxxxxxxxxx111xxxxx0110011,
  ISA_MULW               = 32'b0000001xxxxxxxxxx000xxxxx0111011,
  ISA_DIVW               = 32'b0000001xxxxxxxxxx100xxxxx0111011,
  ISA_DIVUW              = 32'b0000001xxxxxxxxxx101xxxxx0111011,
  ISA_REMW               = 32'b0000001xxxxxxxxxx110xxxxx0111011,
  ISA_REMUW              = 32'b0000001xxxxxxxxxx111xxxxx0111011,
  ISA_AMOADD_W           = 32'b00000xxxxxxxxxxxx010xxxxx0101111,
  ISA_AMOXOR_W           = 32'b00100xxxxxxxxxxxx010xxxxx0101111,
  ISA_AMOOR_W            = 32'b01000xxxxxxxxxxxx010xxxxx0101111,
  ISA_AMOAND_W           = 32'b01100xxxxxxxxxxxx010xxxxx0101111,
  ISA_AMOMIN_W           = 32'b10000xxxxxxxxxxxx010xxxxx0101111,
  ISA_AMOMAX_W           = 32'b10100xxxxxxxxxxxx010xxxxx0101111,
  ISA_AMOMINU_W          = 32'b11000xxxxxxxxxxxx010xxxxx0101111,
  ISA_AMOMAXU_W          = 32'b11100xxxxxxxxxxxx010xxxxx0101111,
  ISA_AMOSWAP_W          = 32'b00001xxxxxxxxxxxx010xxxxx0101111,
  ISA_LR_W               = 32'b00010xx00000xxxxx010xxxxx0101111,
  ISA_SC_W               = 32'b00011xxxxxxxxxxxx010xxxxx0101111,
  ISA_AMOADD_D           = 32'b00000xxxxxxxxxxxx011xxxxx0101111,
  ISA_AMOXOR_D           = 32'b00100xxxxxxxxxxxx011xxxxx0101111,
  ISA_AMOOR_D            = 32'b01000xxxxxxxxxxxx011xxxxx0101111,
  ISA_AMOAND_D           = 32'b01100xxxxxxxxxxxx011xxxxx0101111,
  ISA_AMOMIN_D           = 32'b10000xxxxxxxxxxxx011xxxxx0101111,
  ISA_AMOMAX_D           = 32'b10100xxxxxxxxxxxx011xxxxx0101111,
  ISA_AMOMINU_D          = 32'b11000xxxxxxxxxxxx011xxxxx0101111,
  ISA_AMOMAXU_D          = 32'b11100xxxxxxxxxxxx011xxxxx0101111,
  ISA_AMOSWAP_D          = 32'b00001xxxxxxxxxxxx011xxxxx0101111,
  ISA_LR_D               = 32'b00010xx00000xxxxx011xxxxx0101111,
  ISA_SC_D               = 32'b00011xxxxxxxxxxxx011xxxxx0101111,
  ISA_SCALL              = 32'b00000000000000000000000001110011,
  ISA_SBREAK             = 32'b00000000000100000000000001110011,
  ISA_SRET               = 32'b10000000000000000000000001110011,
  ISA_CSRRW              = 32'bxxxxxxxxxxxxxxxxx001xxxxx1110011,
  ISA_CSRRS              = 32'bxxxxxxxxxxxxxxxxx010xxxxx1110011,
  ISA_CSRRC              = 32'bxxxxxxxxxxxxxxxxx011xxxxx1110011,
  ISA_CSRRWI             = 32'bxxxxxxxxxxxxxxxxx101xxxxx1110011,
  ISA_CSRRSI             = 32'bxxxxxxxxxxxxxxxxx110xxxxx1110011,
  ISA_CSRRCI             = 32'bxxxxxxxxxxxxxxxxx111xxxxx1110011,
  ISA_FADD_S             = 32'b0000000xxxxxxxxxxxxxxxxxx1010011,
  ISA_FSUB_S             = 32'b0000100xxxxxxxxxxxxxxxxxx1010011,
  ISA_FMUL_S             = 32'b0001000xxxxxxxxxxxxxxxxxx1010011,
  ISA_FDIV_S             = 32'b0001100xxxxxxxxxxxxxxxxxx1010011,
  ISA_FSGNJ_S            = 32'b0010000xxxxxxxxxx000xxxxx1010011,
  ISA_FSGNJN_S           = 32'b0010000xxxxxxxxxx001xxxxx1010011,
  ISA_FSGNJX_S           = 32'b0010000xxxxxxxxxx010xxxxx1010011,
  ISA_FMIN_S             = 32'b0010100xxxxxxxxxx000xxxxx1010011,
  ISA_FMAX_S             = 32'b0010100xxxxxxxxxx001xxxxx1010011,
  ISA_FSQRT_S            = 32'b010110000000xxxxxxxxxxxxx1010011,
  ISA_FADD_D             = 32'b0000001xxxxxxxxxxxxxxxxxx1010011,
  ISA_FSUB_D             = 32'b0000101xxxxxxxxxxxxxxxxxx1010011,
  ISA_FMUL_D             = 32'b0001001xxxxxxxxxxxxxxxxxx1010011,
  ISA_FDIV_D             = 32'b0001101xxxxxxxxxxxxxxxxxx1010011,
  ISA_FSGNJ_D            = 32'b0010001xxxxxxxxxx000xxxxx1010011,
  ISA_FSGNJN_D           = 32'b0010001xxxxxxxxxx001xxxxx1010011,
  ISA_FSGNJX_D           = 32'b0010001xxxxxxxxxx010xxxxx1010011,
  ISA_FMIN_D             = 32'b0010101xxxxxxxxxx000xxxxx1010011,
  ISA_FMAX_D             = 32'b0010101xxxxxxxxxx001xxxxx1010011,
  ISA_FCVT_S_D           = 32'b010000000001xxxxxxxxxxxxx1010011,
  ISA_FCVT_D_S           = 32'b010000100000xxxxxxxxxxxxx1010011,
  ISA_FSQRT_D            = 32'b010110100000xxxxxxxxxxxxx1010011,
  ISA_FLE_S              = 32'b1010000xxxxxxxxxx000xxxxx1010011,
  ISA_FLT_S              = 32'b1010000xxxxxxxxxx001xxxxx1010011,
  ISA_FEQ_S              = 32'b1010000xxxxxxxxxx010xxxxx1010011,
  ISA_FLE_D              = 32'b1010001xxxxxxxxxx000xxxxx1010011,
  ISA_FLT_D              = 32'b1010001xxxxxxxxxx001xxxxx1010011,
  ISA_FEQ_D              = 32'b1010001xxxxxxxxxx010xxxxx1010011,
  ISA_FCVT_W_S           = 32'b110000000000xxxxxxxxxxxxx1010011,
  ISA_FCVT_WU_S          = 32'b110000000001xxxxxxxxxxxxx1010011,
  ISA_FCVT_L_S           = 32'b110000000010xxxxxxxxxxxxx1010011,
  ISA_FCVT_LU_S          = 32'b110000000011xxxxxxxxxxxxx1010011,
  ISA_FMV_X_S            = 32'b111000000000xxxxx000xxxxx1010011,
  ISA_FCLASS_S           = 32'b111000000000xxxxx001xxxxx1010011,
  ISA_FCVT_W_D           = 32'b110000100000xxxxxxxxxxxxx1010011,
  ISA_FCVT_WU_D          = 32'b110000100001xxxxxxxxxxxxx1010011,
  ISA_FCVT_L_D           = 32'b110000100010xxxxxxxxxxxxx1010011,
  ISA_FCVT_LU_D          = 32'b110000100011xxxxxxxxxxxxx1010011,
  ISA_FMV_X_D            = 32'b111000100000xxxxx000xxxxx1010011,
  ISA_FCLASS_D           = 32'b111000100000xxxxx001xxxxx1010011,
  ISA_FCVT_S_W           = 32'b110100000000xxxxxxxxxxxxx1010011,
  ISA_FCVT_S_WU          = 32'b110100000001xxxxxxxxxxxxx1010011,
  ISA_FCVT_S_L           = 32'b110100000010xxxxxxxxxxxxx1010011,
  ISA_FCVT_S_LU          = 32'b110100000011xxxxxxxxxxxxx1010011,
  ISA_FMV_S_X            = 32'b111100000000xxxxx000xxxxx1010011,
  ISA_FCVT_D_W           = 32'b110100100000xxxxxxxxxxxxx1010011,
  ISA_FCVT_D_WU          = 32'b110100100001xxxxxxxxxxxxx1010011,
  ISA_FCVT_D_L           = 32'b110100100010xxxxxxxxxxxxx1010011,
  ISA_FCVT_D_LU          = 32'b110100100011xxxxxxxxxxxxx1010011,
  ISA_FMV_D_X            = 32'b111100100000xxxxx000xxxxx1010011,
  ISA_FLW                = 32'bxxxxxxxxxxxxxxxxx010xxxxx0000111,
  ISA_FLD                = 32'bxxxxxxxxxxxxxxxxx011xxxxx0000111,
  ISA_FSW                = 32'bxxxxxxxxxxxxxxxxx010xxxxx0100111,
  ISA_FSD                = 32'bxxxxxxxxxxxxxxxxx011xxxxx0100111,
  ISA_FMADD_S            = 32'bxxxxx00xxxxxxxxxxxxxxxxxx1000011,
  ISA_FMSUB_S            = 32'bxxxxx00xxxxxxxxxxxxxxxxxx1000111,
  ISA_FNMSUB_S           = 32'bxxxxx00xxxxxxxxxxxxxxxxxx1001011,
  ISA_FNMADD_S           = 32'bxxxxx00xxxxxxxxxxxxxxxxxx1001111,
  ISA_FMADD_D            = 32'bxxxxx01xxxxxxxxxxxxxxxxxx1000011,
  ISA_FMSUB_D            = 32'bxxxxx01xxxxxxxxxxxxxxxxxx1000111,
  ISA_FNMSUB_D           = 32'bxxxxx01xxxxxxxxxxxxxxxxxx1001011,
  ISA_FNMADD_D           = 32'bxxxxx01xxxxxxxxxxxxxxxxxx1001111,
  ISA_CUSTOM0            = 32'bxxxxxxxxxxxxxxxxx000xxxxx0001011,
  ISA_CUSTOM0_RS1        = 32'bxxxxxxxxxxxxxxxxx010xxxxx0001011,
  ISA_CUSTOM0_RS1_RS2    = 32'bxxxxxxxxxxxxxxxxx011xxxxx0001011,
  ISA_CUSTOM0_RD         = 32'bxxxxxxxxxxxxxxxxx100xxxxx0001011,
  ISA_CUSTOM0_RD_RS1     = 32'bxxxxxxxxxxxxxxxxx110xxxxx0001011,
  ISA_CUSTOM0_RD_RS1_RS2 = 32'bxxxxxxxxxxxxxxxxx111xxxxx0001011,
  ISA_CUSTOM1            = 32'bxxxxxxxxxxxxxxxxx000xxxxx0101011,
  ISA_CUSTOM1_RS1        = 32'bxxxxxxxxxxxxxxxxx010xxxxx0101011,
  ISA_CUSTOM1_RS1_RS2    = 32'bxxxxxxxxxxxxxxxxx011xxxxx0101011,
  ISA_CUSTOM1_RD         = 32'bxxxxxxxxxxxxxxxxx100xxxxx0101011,
  ISA_CUSTOM1_RD_RS1     = 32'bxxxxxxxxxxxxxxxxx110xxxxx0101011,
  ISA_CUSTOM1_RD_RS1_RS2 = 32'bxxxxxxxxxxxxxxxxx111xxxxx0101011,
  ISA_CUSTOM2            = 32'bxxxxxxxxxxxxxxxxx000xxxxx1011011,
  ISA_CUSTOM2_RS1        = 32'bxxxxxxxxxxxxxxxxx010xxxxx1011011,
  ISA_CUSTOM2_RS1_RS2    = 32'bxxxxxxxxxxxxxxxxx011xxxxx1011011,
  ISA_CUSTOM2_RD         = 32'bxxxxxxxxxxxxxxxxx100xxxxx1011011,
  ISA_CUSTOM2_RD_RS1     = 32'bxxxxxxxxxxxxxxxxx110xxxxx1011011,
  ISA_CUSTOM2_RD_RS1_RS2 = 32'bxxxxxxxxxxxxxxxxx111xxxxx1011011,
  ISA_CUSTOM3            = 32'bxxxxxxxxxxxxxxxxx000xxxxx1111011,
  ISA_CUSTOM3_RS1        = 32'bxxxxxxxxxxxxxxxxx010xxxxx1111011,
  ISA_CUSTOM3_RS1_RS2    = 32'bxxxxxxxxxxxxxxxxx011xxxxx1111011,
  ISA_CUSTOM3_RD         = 32'bxxxxxxxxxxxxxxxxx100xxxxx1111011,
  ISA_CUSTOM3_RD_RS1     = 32'bxxxxxxxxxxxxxxxxx110xxxxx1111011,
  ISA_CUSTOM3_RD_RS1_RS2 = 32'bxxxxxxxxxxxxxxxxx111xxxxx1111011,
  ISA_NOP                = 32'b00000000000000000000000000010011
} t_isa;

typedef enum logic [4-1:0] {
  val misaligned_fetch       = 4'h0,
  val fault_fetch            = 4'h1,
  val illegal_instruction    = 4'h2,
  val privileged_instruction = 4'h3,
  val fp_disabled            = 4'h4,
  val syscall                = 4'h6,
  val breakpoint             = 4'h7,
  val misaligned_load        = 4'h8,
  val misaligned_store       = 4'h9,
  val fault_load             = 4'ha,
  val fault_store            = 4'hb,
  val accelerator_disabled   = 4'hc
} t_causes;

//object Causes {
//  val all = {
//    val res = collection.mutable.ArrayBuffer[Int]()
//    res += misaligned_fetch
//    res += fault_fetch
//    res += illegal_instruction
//    res += privileged_instruction
//    res += fp_disabled
//    res += syscall
//    res += breakpoint
//    res += misaligned_load
//    res += misaligned_store
//    res += fault_load
//    res += fault_store
//    res += accelerator_disabled
//    res.toArray
//  }
//}

typedef enum logic [12-1:0] {
  fflags    = 12'h001,
  frm       = 12'h002,
  fcsr      = 12'h003,
  sup0      = 12'h500,
  sup1      = 12'h501,
  epc       = 12'h502,
  badvaddr  = 12'h503,
  ptbr      = 12'h504,
  asid      = 12'h505,
  count     = 12'h506,
  compare   = 12'h507,
  evec      = 12'h508,
  cause     = 12'h509,
  status    = 12'h50a,
  hartid    = 12'h50b,
  impl      = 12'h50c,
  fatc      = 12'h50d,
  send_ipi  = 12'h50e,
  clear_ipi = 12'h50f,
  stats     = 12'h51c,
  reset     = 12'h51d,
  tohost    = 12'h51e,
  fromhost  = 12'h51f,
  cycle     = 12'hc00,
  time      = 12'hc01,
  instret   = 12'hc02,
  uarch0    = 12'hcc0,
  uarch1    = 12'hcc1,
  uarch2    = 12'hcc2,
  uarch3    = 12'hcc3,
  uarch4    = 12'hcc4,
  uarch5    = 12'hcc5,
  uarch6    = 12'hcc6,
  uarch7    = 12'hcc7,
  uarch8    = 12'hcc8,
  uarch9    = 12'hcc9,
  uarch10   = 12'hcca,
  uarch11   = 12'hccb,
  uarch12   = 12'hccc,
  uarch13   = 12'hccd,
  uarch14   = 12'hcce,
  uarch15   = 12'hccf,
  counth    = 12'h586,
  cycleh    = 12'hc80,
  timeh     = 12'hc81,
  instreth  = 12'hc82
} t_csrs;

//object CSRs {
//  val all = {
//    val res = collection.mutable.ArrayBuffer[Int]()
//    res += fflags
//    res += frm
//    res += fcsr
//    res += sup0
//    res += sup1
//    res += epc
//    res += badvaddr
//    res += ptbr
//    res += asid
//    res += count
//    res += compare
//    res += evec
//    res += cause
//    res += status
//    res += hartid
//    res += impl
//    res += fatc
//    res += send_ipi
//    res += clear_ipi
//    res += stats
//    res += reset
//    res += tohost
//    res += fromhost
//    res += cycle
//    res += time
//    res += instret
//    res += uarch0
//    res += uarch1
//    res += uarch2
//    res += uarch3
//    res += uarch4
//    res += uarch5
//    res += uarch6
//    res += uarch7
//    res += uarch8
//    res += uarch9
//    res += uarch10
//    res += uarch11
//    res += uarch12
//    res += uarch13
//    res += uarch14
//    res += uarch15
//    res.toArray
//  }
//  val all32 = {
//    val res = collection.mutable.ArrayBuffer(all:_*)
//    res += counth
//    res += cycleh
//    res += timeh
//    res += instreth
//    res.toArray
//  }
//}

endpackage: instructions
